# Copilot Bot - Intelligent automation for miscellaneous tasks
name: Copilot Bot

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]
  issue_comment:
    types: [created]

jobs:
  auto-label-issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Auto-label issues based on content
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();
            const labels = [];
            
            console.log(`Analyzing issue #${number}: "${issue.title}"`);
            
            // Bug detection
            if (title.includes('[bug]') || title.includes('bug:') || 
                title.includes('error') || title.includes('fix') ||
                body.includes('bug') || body.includes('error') || 
                body.includes('exception') || body.includes('crash')) {
              labels.push('bug');
              console.log('Detected: Bug');
            }
            
            // Feature request detection
            if (title.includes('[feature]') || title.includes('feature:') ||
                title.includes('enhancement') || title.includes('add') ||
                body.includes('feature request') || body.includes('enhancement') ||
                body.includes('would be nice') || body.includes('suggestion')) {
              labels.push('enhancement');
              console.log('Detected: Enhancement');
            }
            
            // Question detection
            if (title.includes('[question]') || title.includes('question:') ||
                title.includes('how to') || title.includes('help') ||
                body.includes('how do i') || body.includes('question')) {
              labels.push('question');
              console.log('Detected: Question');
            }
            
            // Documentation detection
            if (title.includes('doc') || title.includes('readme') ||
                body.includes('documentation') || body.includes('docs') ||
                body.includes('readme') || body.includes('guide')) {
              labels.push('documentation');
              console.log('Detected: Documentation');
            }
            
            // Security detection
            if (title.includes('security') || title.includes('vulnerability') ||
                body.includes('security') || body.includes('vulnerability') ||
                body.includes('cve') || body.includes('exploit')) {
              labels.push('security');
              console.log('Detected: Security');
            }
            
            // Performance detection
            if (title.includes('performance') || title.includes('slow') ||
                title.includes('speed') || body.includes('performance') ||
                body.includes('optimization') || body.includes('faster')) {
              labels.push('performance');
              console.log('Detected: Performance');
            }
            
            // Good first issue detection
            if (title.includes('simple') || title.includes('easy') ||
                body.includes('good first issue') || body.includes('beginner')) {
              labels.push('good-first-issue');
              console.log('Detected: Good first issue');
            }
            
            // Help wanted detection
            if (body.includes('help wanted') || body.includes('community') ||
                body.includes('looking for help')) {
              labels.push('help-wanted');
              console.log('Detected: Help wanted');
            }
            
            // Priority detection
            if (title.includes('urgent') || title.includes('critical') ||
                body.includes('urgent') || body.includes('critical') ||
                body.includes('blocker')) {
              labels.push('priority-high');
              console.log('Detected: High priority');
            } else if (title.includes('important') || body.includes('important')) {
              labels.push('priority-medium');
              console.log('Detected: Medium priority');
            }
            
            // Testing detection
            if (title.includes('test') || body.includes('testing') ||
                body.includes('test case') || body.includes('unit test')) {
              labels.push('testing');
              console.log('Detected: Testing');
            }
            
            // CI/CD detection
            if (title.includes('ci') || title.includes('cd') ||
                title.includes('workflow') || body.includes('github actions') ||
                body.includes('pipeline')) {
              labels.push('ci-cd');
              console.log('Detected: CI/CD');
            }
            
            // Refactoring detection
            if (title.includes('refactor') || body.includes('refactoring') ||
                body.includes('cleanup') || body.includes('improve code')) {
              labels.push('refactoring');
              console.log('Detected: Refactoring');
            }
            
            // Add labels if any were detected
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: labels
              });
              
              console.log(`Added ${labels.length} labels to issue #${number}: ${labels.join(', ')}`);
              
              // Add comment explaining the labels
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `🤖 **Copilot Bot** automatically added the following labels based on the issue content:

${labels.map(label => `- \`${label}\``).join('\n')}

If any labels are incorrect, please feel free to remove or adjust them. Thank you! 🙏`
              });
            } else {
              console.log('No automatic labels detected for this issue');
            }

  auto-label-prs:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-label PRs based on content and changes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();
            const body = (pr.body || '').toLowerCase();
            const labels = [];
            
            console.log(`Analyzing PR #${number}: "${pr.title}"`);
            
            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number
            });
            
            const changedFiles = files.map(f => f.filename);
            console.log(`Changed files: ${changedFiles.join(', ')}`);
            
            // Bug fix detection
            if (title.includes('fix') || title.includes('bug') ||
                body.includes('fixes #') || body.includes('closes #')) {
              labels.push('bug');
              console.log('Detected: Bug fix');
            }
            
            // Feature detection
            if (title.includes('add') || title.includes('feature') ||
                title.includes('implement') || body.includes('new feature')) {
              labels.push('enhancement');
              console.log('Detected: Enhancement');
            }
            
            // Documentation detection
            if (changedFiles.some(f => f.endsWith('.md')) ||
                title.includes('doc') || body.includes('documentation')) {
              labels.push('documentation');
              console.log('Detected: Documentation');
            }
            
            // Testing detection
            if (changedFiles.some(f => f.includes('test')) ||
                title.includes('test') || body.includes('testing')) {
              labels.push('testing');
              console.log('Detected: Testing');
            }
            
            // Refactoring detection
            if (title.includes('refactor') || title.includes('cleanup') ||
                body.includes('refactoring') || body.includes('code cleanup')) {
              labels.push('refactoring');
              console.log('Detected: Refactoring');
            }
            
            // Performance detection
            if (title.includes('performance') || title.includes('optimize') ||
                body.includes('optimization') || body.includes('performance')) {
              labels.push('performance');
              console.log('Detected: Performance');
            }
            
            // Security detection
            if (title.includes('security') || body.includes('security') ||
                body.includes('vulnerability')) {
              labels.push('security');
              console.log('Detected: Security');
            }
            
            // Breaking change detection
            if (title.includes('breaking') || body.includes('breaking change') ||
                body.includes('breaking:')) {
              labels.push('breaking-change');
              console.log('Detected: Breaking change');
            }
            
            // Dependencies detection
            if (changedFiles.some(f => f.includes('requirements') || 
                f.includes('package.json') || f.includes('pyproject.toml')) ||
                title.includes('dep') || title.includes('update')) {
              labels.push('dependencies');
              console.log('Detected: Dependencies');
            }
            
            // CI/CD detection
            if (changedFiles.some(f => f.includes('.github/workflows')) ||
                title.includes('ci') || title.includes('workflow')) {
              labels.push('ci-cd');
              console.log('Detected: CI/CD');
            }
            
            // Frontend detection
            if (changedFiles.some(f => f.includes('docs/') || f.endsWith('.html') || 
                f.endsWith('.css') || f.endsWith('.js'))) {
              labels.push('frontend');
              console.log('Detected: Frontend');
            }
            
            // Backend detection
            if (changedFiles.some(f => f.includes('refactron/') && f.endsWith('.py'))) {
              labels.push('backend');
              console.log('Detected: Backend');
            }
            
            // Size detection
            const additions = files.reduce((sum, f) => sum + f.additions, 0);
            const deletions = files.reduce((sum, f) => sum + f.deletions, 0);
            const totalChanges = additions + deletions;
            
            if (totalChanges < 50) {
              labels.push('size/small');
              console.log('Detected: Small PR');
            } else if (totalChanges < 200) {
              labels.push('size/medium');
              console.log('Detected: Medium PR');
            } else if (totalChanges < 500) {
              labels.push('size/large');
              console.log('Detected: Large PR');
            } else {
              labels.push('size/xlarge');
              console.log('Detected: Extra large PR');
            }
            
            // Add labels if any were detected
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: labels
              });
              
              console.log(`Added ${labels.length} labels to PR #${number}: ${labels.join(', ')}`);
              
              // Add comment explaining the labels
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `🤖 **Copilot Bot** automatically added the following labels based on the PR content:

${labels.map(label => `- \`${label}\``).join('\n')}

**PR Stats:**
- 📝 Files changed: ${files.length}
- ➕ Additions: ${additions}
- ➖ Deletions: ${deletions}
- 📊 Total changes: ${totalChanges}

If any labels are incorrect, please feel free to remove or adjust them. Thank you! 🙏`
              });
            } else {
              console.log('No automatic labels detected for this PR');
            }

  auto-respond-commands:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
    steps:
      - name: Respond to bot commands
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const comment = context.payload.comment;
            const issue = context.payload.issue;
            const commentBody = comment.body.toLowerCase();
            const commenter = comment.user.login;
            
            console.log(`Processing comment from ${commenter}: "${comment.body}"`);
            
            // /label command
            if (commentBody.startsWith('/label ')) {
              const labels = commentBody.replace('/label ', '').split(',').map(l => l.trim());
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: issue.number,
                labels: labels
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 Added labels: ${labels.map(l => `\`${l}\``).join(', ')}`
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }
            
            // /unlabel command
            if (commentBody.startsWith('/unlabel ')) {
              const labels = commentBody.replace('/unlabel ', '').split(',').map(l => l.trim());
              for (const label of labels) {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: issue.number,
                  name: label
                }).catch(() => console.log(`Label ${label} not found`));
              }
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 Removed labels: ${labels.map(l => `\`${l}\``).join(', ')}`
              });
              
              console.log(`Removed labels: ${labels.join(', ')}`);
            }
            
            // /assign command
            if (commentBody.startsWith('/assign ')) {
              const assignees = commentBody.replace('/assign ', '').split(',').map(a => a.trim().replace('@', ''));
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: issue.number,
                assignees: assignees
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 Assigned to: ${assignees.map(a => `@${a}`).join(', ')}`
              });
              
              console.log(`Assigned to: ${assignees.join(', ')}`);
            }
            
            // /close command
            if (commentBody === '/close') {
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 Closed by ${commenter}`
              });
              
              console.log(`Issue closed by ${commenter}`);
            }
            
            // /reopen command
            if (commentBody === '/reopen') {
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issue.number,
                state: 'open'
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 Reopened by ${commenter}`
              });
              
              console.log(`Issue reopened by ${commenter}`);
            }
            
            // /duplicate command
            if (commentBody.startsWith('/duplicate ')) {
              const duplicateNumber = commentBody.replace('/duplicate ', '').trim();
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: issue.number,
                labels: ['duplicate']
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 Marked as duplicate of #${duplicateNumber}`
              });
              
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              console.log(`Marked as duplicate of #${duplicateNumber}`);
            }
            
            // /help command
            if (commentBody === '/help' || commentBody === '/commands') {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `🤖 **Copilot Bot Commands**

Available commands:
- \`/label bug, enhancement\` - Add labels
- \`/unlabel bug\` - Remove labels
- \`/assign @username\` - Assign users
- \`/close\` - Close issue/PR
- \`/reopen\` - Reopen issue/PR
- \`/duplicate #123\` - Mark as duplicate
- \`/help\` - Show this help message

Example: \`/label bug, priority-high\``
              });
              
              console.log('Showed help message');
            }
